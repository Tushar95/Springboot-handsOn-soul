package com.handson.soul.service;import io.github.resilience4j.ratelimiter.RequestNotPermitted;import io.github.resilience4j.ratelimiter.annotation.RateLimiter;import org.springframework.stereotype.Service;import java.util.concurrent.CompletableFuture;@Servicepublic class RateLimitingDemoService {//    @RateLimiter(name="limitedService")//    public CompletableFuture<String> simulateRateLimit() {//        return CompletableFuture.supplyAsync(() -> {//            try { Thread.sleep(3000); } catch(Exception ignored){}//            return "✅ Success";//        });//    }    @RateLimiter(name = "limitedService")    public String processRequest() {        // Simulate some processing time        try { Thread.sleep(1000); } catch (InterruptedException ignored) {}        return "✅ Request processed at " + System.currentTimeMillis();    }//    private CompletableFuture<String> rateLimitFallback(RequestNotPermitted ex) {//        return CompletableFuture.completedFuture("Too many request, try again later");//    }}